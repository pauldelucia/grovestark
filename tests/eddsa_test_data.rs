// Valid EdDSA test data generated for GroveSTARK
// This provides a real Ed25519 signature that verifies correctly

// Valid EdDSA test data freshly generated and verified
pub const EDDSA_PRIVATE_KEY: [u8; 32] = [
    0x1a, 0x0d, 0x5c, 0xb2, 0x84, 0xbe, 0x07, 0x79, 0x3d, 0x69, 0xd2, 0x6f, 0x80, 0x9f, 0xce, 0x4b,
    0xa3, 0xae, 0x9c, 0x3f, 0xfa, 0xc7, 0x01, 0xcd, 0xc5, 0xb0, 0x37, 0xb0, 0xfe, 0xaa, 0xc0, 0x42,
];

pub const EDDSA_PUBLIC_KEY: [u8; 32] = [
    0x6d, 0xec, 0x36, 0xed, 0xcc, 0xb6, 0x57, 0xea, 0xcf, 0x26, 0x18, 0x00, 0x02, 0x96, 0x70, 0xb6,
    0x4b, 0x4d, 0x59, 0x2c, 0xd5, 0xed, 0x84, 0x68, 0xf6, 0xf9, 0xdd, 0x43, 0x4b, 0x3f, 0xdc, 0x05,
];

// Message that was signed
pub const MESSAGE: &[u8] = b"Test message for GroveSTARK EdDSA verification";

pub const MESSAGE_HASH: [u8; 32] = [
    0xfb, 0x5d, 0x3f, 0x0c, 0x1d, 0xbb, 0xb9, 0xf1, 0x4e, 0xa5, 0x31, 0x6b, 0xb8, 0xd4, 0x82, 0x72,
    0xcc, 0x69, 0x26, 0x2c, 0x66, 0x75, 0x19, 0xe8, 0x1b, 0x5c, 0x9e, 0x70, 0x26, 0x0b, 0x63, 0xd3,
];

// Signature Components (valid signature that verifies correctly)
pub const SIGNATURE_R: [u8; 32] = [
    0x8b, 0x3e, 0x77, 0xaf, 0xea, 0x20, 0xb2, 0x77, 0x03, 0x58, 0x10, 0x6a, 0xe9, 0x33, 0xec, 0x4f,
    0x09, 0x79, 0x84, 0x29, 0x3f, 0x34, 0x18, 0xea, 0x3f, 0x20, 0x8d, 0x43, 0x5a, 0xe7, 0x4d, 0x7b,
];

pub const SIGNATURE_S: [u8; 32] = [
    0x6b, 0x87, 0xba, 0xe2, 0x73, 0xfd, 0x7c, 0x8c, 0x19, 0xca, 0xcf, 0xd3, 0xcd, 0x05, 0x80, 0x33,
    0x3c, 0x55, 0x61, 0xb5, 0x34, 0xd2, 0x88, 0xb4, 0xd8, 0x75, 0x7f, 0xb5, 0xd5, 0x67, 0x57, 0x01,
];

// Hash h = SHA-512(R || A || M) mod L (for EdDSA verification)
pub const HASH_H: [u8; 32] = [
    0x8e, 0x8b, 0xdc, 0x7f, 0x61, 0x6f, 0xde, 0xac, 0x36, 0x84, 0x2d, 0xf9, 0x93, 0x06, 0x5c, 0x62,
    0x9c, 0xcd, 0x9c, 0x23, 0x7b, 0xf0, 0xff, 0x61, 0xe0, 0x6c, 0x53, 0x4f, 0xb0, 0xe7, 0x66, 0x02,
];

// For extended coordinates, we need to properly decompress the points
// These are placeholders until we implement proper decompression
pub const R_EXTENDED_X: [u8; 32] = [0; 32]; // TODO: Compute from decompression
pub const R_EXTENDED_Y: [u8; 32] = [
    0xcc, 0xbe, 0x0e, 0x07, 0x1b, 0x3d, 0x98, 0x78, 0x56, 0x37, 0x2d, 0x16, 0x9d, 0x38, 0x5e, 0xfa,
    0x38, 0x4a, 0xa9, 0xc5, 0x15, 0x8a, 0xf3, 0x4e, 0xc8, 0x77, 0x09, 0xe8, 0xd9, 0x60, 0x44, 0xa1,
];
pub const R_EXTENDED_Z: [u8; 32] = [
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];
pub const R_EXTENDED_T: [u8; 32] = [0; 32]; // TODO: Compute X*Y/Z

pub const A_EXTENDED_X: [u8; 32] = [0; 32]; // TODO: Compute from decompression
pub const A_EXTENDED_Y: [u8; 32] = [
    0x5a, 0xef, 0x23, 0x2b, 0x7f, 0x89, 0xde, 0x68, 0x4d, 0x2d, 0xe7, 0x54, 0x66, 0xbf, 0xa5, 0xfb,
    0xed, 0xed, 0x58, 0xb4, 0x15, 0x26, 0x13, 0xe6, 0xe7, 0x15, 0x92, 0x9d, 0x39, 0x11, 0x40, 0x85,
];
pub const A_EXTENDED_Z: [u8; 32] = [
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];
pub const A_EXTENDED_T: [u8; 32] = [0; 32]; // TODO: Compute X*Y/Z

#[cfg(test)]
mod tests {
    use super::*;
    use grovestark::types::{PrivateInputs, PublicInputs};

    /// Create a witness with valid EdDSA test data
    pub fn create_valid_eddsa_witness() -> PrivateInputs {
        PrivateInputs {
            private_key: EDDSA_PRIVATE_KEY,
            signature_r: SIGNATURE_R,
            signature_s: SIGNATURE_S,
            hash_h: HASH_H,
            r_extended_x: R_EXTENDED_X,
            r_extended_y: R_EXTENDED_Y,
            r_extended_z: R_EXTENDED_Z,
            r_extended_t: R_EXTENDED_T,
            a_extended_x: A_EXTENDED_X,
            a_extended_y: A_EXTENDED_Y,
            a_extended_z: A_EXTENDED_Z,
            a_extended_t: A_EXTENDED_T,
            ..Default::default()
        }
    }

    #[test]
    fn test_eddsa_signature_validity() {
        use ed25519_dalek::{Signature, Verifier, VerifyingKey};

        // Reconstruct the signature
        let mut sig_bytes = [0u8; 64];
        sig_bytes[..32].copy_from_slice(&SIGNATURE_R);
        sig_bytes[32..].copy_from_slice(&SIGNATURE_S);
        let signature = Signature::from_bytes(&sig_bytes);

        // Reconstruct the public key
        let verifying_key = VerifyingKey::from_bytes(&EDDSA_PUBLIC_KEY).unwrap();

        // Verify the signature
        assert!(verifying_key.verify(MESSAGE, &signature).is_ok());
    }
}
